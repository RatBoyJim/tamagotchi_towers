[{"/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/index.js":"1","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/App.js":"2","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/reportWebVitals.js":"3","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LandingPageContainer/LandingPage.js":"4","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LoadCreateContainer/ChoicePage.js":"5","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LoadCreateContainer/CreatePage.js":"6","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LoadCreateContainer/LoadPage.js":"7","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LandingPageContainer/NavBar.js":"8","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/CharacterContainer/Character.js":"9","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/CharacterComponents/StatBar.js":"10","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/LoadCreateComponents/DisplayAllCharacters.js":"11","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/CharacterComponents/Button.js":"12","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/LoadCreateComponents/SaveForm.js":"13"},{"size":500,"mtime":1611934455306,"results":"14","hashOfConfig":"15"},{"size":9635,"mtime":1612459323412,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1611934455306,"results":"17","hashOfConfig":"15"},{"size":1738,"mtime":1612457411194,"results":"18","hashOfConfig":"15"},{"size":1232,"mtime":1612457411195,"results":"19","hashOfConfig":"15"},{"size":2897,"mtime":1612457411195,"results":"20","hashOfConfig":"15"},{"size":1467,"mtime":1612457411195,"results":"21","hashOfConfig":"15"},{"size":266,"mtime":1612457411195,"results":"22","hashOfConfig":"15"},{"size":3827,"mtime":1612459323412,"results":"23","hashOfConfig":"15"},{"size":1076,"mtime":1612283688301,"results":"24","hashOfConfig":"15"},{"size":226,"mtime":1612457411193,"results":"25","hashOfConfig":"15"},{"size":355,"mtime":1612457411193,"results":"26","hashOfConfig":"15"},{"size":2452,"mtime":1612457411193,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1c2x2c",{"filePath":"31","messages":"32","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"30"},"/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/index.js",[],["66","67"],"/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/App.js",["68","69","70","71","72","73","74"],"import React, {useState, useEffect} from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport NavBar from \"./containers/LandingPageContainer/NavBar\";\nimport LandingPage from \"./containers/LandingPageContainer/LandingPage\";\nimport ChoicePage from \"./containers/LoadCreateContainer/ChoicePage\";\nimport CreatePage from \"./containers/LoadCreateContainer/CreatePage\";\nimport LoadPage from \"./containers/LoadCreateContainer/LoadPage\";\nimport Character from \"./containers/CharacterContainer/Character\";\nimport dogHeart  from \"./gifs/dog/dog_heart.gif\"\nimport catMeow from \"./gifs/cat/cat_meow.gif\"\nimport monkeySpeak from \"./gifs/monkey/monkey_speak.gif\"\nimport unicornRainbow from \"./gifs/unicorn/unicorn_rainbow.gif\"\nimport dinoRawr from \"./gifs/dino/dinosaur_rawr.gif\"\nimport penguinHeart from \"./gifs/penguin/penguin_heart.gif\"\nimport \"./App.css\"\nimport \"./style/LandingPage.css\"\nimport \"./style/CreatePage.css\"\nimport \"./style/CharacterPage.css\"\nimport \"./style/ChoicePage.css\"\nimport \"./style/LoadPage.css\"\nimport SaveForm from \"./components/LoadCreateComponents/SaveForm\";\n\n\n\n\nconst App = ()=> {\n\n  const [allUserData, setAllUserData] = useState([]);\n  const [allAnimalData, setAllAnimalData] = useState([]);\n  const [loggedInUsername, setLoggedInUsername] = useState();\n  const [loggedInPassword, setLoggedInPassword] = useState();\n  const [userData, setUserData] = useState([]);\n  const [currentCharacter, setCurrentCharacter] = useState({});\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [hasSelectedCharacter, setHasSelectedCharacter] = useState(false);\n  const [currentImage, setCurrentImage] = useState('');\n  const [loaded, setLoaded] = useState(false);\n  const [userDataLoaded, setUserDataLoaded] = useState(false);\n  const [animalDataLoaded, setAnimalDataLoaded] = useState(false);\n  const [hardDifficulty, setHardDifficulty] = useState(false);\n\n  \n  const adoptableAnimals = [\n    {animal: \"DOG\", image: [dogHeart]},\n    {animal: \"CAT\", image: [catMeow]},\n    {animal: \"MONKEY\", image: [monkeySpeak]},\n    {animal: \"DINOSAUR\", image: [dinoRawr]},\n    {animal: \"UNICORN\", image: [unicornRainbow]},\n    {animal: \"PENGUIN\", image: [penguinHeart]}\n  ]\n\n  const getAllUserData = () => {\n    console.log(\"getting all user data\");\n    return fetch('http://localhost:8080/api/users')\n    .then(res => res.json())\n    .then(data => setAllUserData(data))\n  }\n\n  useEffect(() => {\n    getAllUserData();\n  }, [])\n\n  const getAllAnimalData = () => {\n    console.log(\"getting animal data\");\n    return fetch('http://localhost:8080/api/animals')\n    .then(res => res.json())\n    .then(data => setAllAnimalData(data))\n    .then(setAnimalDataLoaded(true))\n  }\n\n  useEffect(() => {\n    getAllAnimalData();\n  }, [])\n\n  const speed = () => {\n    if (hardDifficulty === true) {\n      return 0.05\n    }else{\n      return 0.0010\n    }\n  }\n\n  const reduceStats = () => {\n    if (currentCharacter.health>0){\n      \n      const interval = setInterval(() => {\n        currentCharacter.health = (currentCharacter.happiness + currentCharacter.fitness + currentCharacter.cleanliness + currentCharacter.hunger)/4;\n        setIntervalId(interval)\n        });\n    }\n    if (currentCharacter.happiness>0){\n      \n    const interval = setInterval(() => {\n      currentCharacter.happiness -= currentCharacter.cheeriness*speed();\n      setIntervalId(interval)\n      if(currentCharacter.happiness === 0) {\n        \n    }}, 10);\n  }\n  if (currentCharacter.cleanliness>0){\n      \n    const interval = setInterval(() => {\n      \n      currentCharacter.cleanliness -= currentCharacter.grooming*speed();\n      setIntervalId(interval)\n      if(currentCharacter.cleanliness === 0) {\n        \n    }}, 10);\n  }\n  if (currentCharacter.hunger>0){\n      \n    const interval = setInterval(() => {\n      currentCharacter.hunger -= currentCharacter.appetite*speed();\n      setIntervalId(interval)\n      if(currentCharacter.hunger === 0) {\n        \n    }}, 10);\n  }\n  if (currentCharacter.fitness>0){\n      \n    const interval = setInterval(() => {\n      currentCharacter.fitness -=currentCharacter.activityLevel*speed();\n      setIntervalId(interval)\n      if(currentCharacter.fitness === 0) {\n    }}, 10);\n  }\n  }\n\n  clearInterval(intervalId);\n\n  const increaseStat = (stat) => {\n    if (currentCharacter[stat]<95){\n      currentCharacter[stat] += 5;\n    }\n    else (currentCharacter[stat] = 100)\n  }\n  \n  const characterGif = () => {\n    if (currentCharacter){\n\n      if (currentCharacter.health<1){\n        setCurrentImage(currentCharacter.rip)\n      }\n      else if (currentCharacter.hunger<2){\n        setCurrentImage(currentCharacter.rip)\n      }\n      else if (currentCharacter.health<50){\n        setCurrentImage(currentCharacter.exclamation)\n      } \n      else if (currentCharacter.health<80){\n        setCurrentImage(currentCharacter.speak)\n      } \n      else{\n        setCurrentImage(currentCharacter.heart)\n      }  \n    }\n  }\n\n  const handleSubmit = (data) => {\n    allUserData.forEach(element => {\n      if (element.userName === data.username && element.password === data.password){\n        console.log(\"Success\");\n        setLoggedInUsername(data.username)\n        setLoggedInPassword(data.password)\n        setLoggedIn(true);\n        getUserData()\n        setLoggedIn(true)\n        setUserDataLoaded(true)\n      }else{\n        console.log(\"Failure\");\n      }\n    });\n  }\n\n  const getUserData = () => {\n    console.log(\"getting user data\");\n    console.log(\"NAME IS\" + loggedInUsername)\n    return fetch(`http://localhost:8080/api/users?username=${loggedInUsername}`)\n    .then(res => res.json())\n    .then(data => setUserData(data))\n    .then(setUserDataLoaded(true))\n    \n  }\n\n  useEffect(() => {\n    getUserData();\n  }, [loggedInUsername && loggedInPassword || hasSelectedCharacter===true])\n\n  const selectCurrentCharacter = (characterId) => {\n    setCurrentCharacter(allAnimalData.find(animal => animal.id === characterId))\n    setHasSelectedCharacter(true)\n  }\n\n  const unsetSelectedCharacter = () => {\n    setCurrentCharacter({})\n    setHasSelectedCharacter(false)\n  }\n\n  useEffect(() => {\n    if (loggedIn===true){\n    reduceStats()\n    characterGif()\n    }\n  }, [ currentCharacter.hunger || currentCharacter.fitness || currentCharacter.cleanliness || currentCharacter.happiness ])\n\n  const logInNewUser = (userDeets) => {\n    setLoggedInUsername(userDeets.username);\n    setLoggedInPassword(userDeets.password);\n    setLoggedIn(true);\n  }\n\n\n\n  \n  return (\n    <Router>\n      <>\n        <header>\n          <h1 id=\"title\">Tamagotchi Towers</h1>\n          <NavBar id=\"navbar\"/>\n        </header>\n        <Switch>\n        <Route exact path=\"/\" render={() => loggedIn? <Redirect to= \"/choicepage\" /> : <LandingPage onSubmit = {handleSubmit}></LandingPage>} />\n        <Route path=\"/choicepage\" render={() => <ChoicePage unsetSelectedCharacter={unsetSelectedCharacter} userDataLoaded={userDataLoaded}/>}/>\n        \n        <Route path=\"/newuser\" render={() => loggedIn? <Redirect to= \"/createpage\" /> :<SaveForm logInNewUser={(userDeets) => logInNewUser(userDeets)} />}/>\n       \n       <Route path=\"/createpage\" render={() => hasSelectedCharacter? <Redirect to=\"/choicepage\"/>: <CreatePage allAnimals={adoptableAnimals}\n                    setCurrentCharacter={setCurrentCharacter} setHasSelectedCharacter={setHasSelectedCharacter} getUserData={getUserData} userData={userData} setLoaded={setLoaded} userDataLoaded={userDataLoaded} getAllAnimalData={getAllAnimalData}/>}/>\n\n        <Route path=\"/loadpage\"  render={() => <LoadPage userAnimals={userData[0] !== undefined ? userData[0].animals : undefined} selectCurrentCharacter={selectCurrentCharacter} getUserData={getUserData} getAllAnimalData={getAllAnimalData} setLoaded={setLoaded} loaded={loaded} animalDataLoaded={animalDataLoaded}/>} />\n\n        <Route path=\"/character\" render={() => <Character currentCharacter={currentCharacter} currentImage={currentImage} increaseStat={increaseStat} loaded={loaded} setLoggedInUsername={setLoggedInUsername} setLoggedInPassword={setLoggedInPassword} setUserData={setUserData} setCurrentCharacter={setCurrentCharacter} setLoggedIn={setLoggedIn} setHasSelectedCharacter={setHasSelectedCharacter} setLoaded={setLoaded} setUserDataLoaded={setUserDataLoaded} setAnimalDataLoaded={setAnimalDataLoaded} setHardDifficulty={setHardDifficulty} getAllUserData={getAllUserData}/>}/>\n        \n        </Switch>\n      </>\n    </Router>\n  )\n\n}\n\nexport default App;\n\n{/* <Route exact path=\"/\" render={() => loggedIn? <Redirect to= \"/choicepage\" /> : <LandingPage onSubmit = {handleSubmit}></LandingPage>} />\n        <Route path=\"/choicepage\" render={() => <ChoicePage unsetSelectedCharacter={unsetSelectedCharacter} userDataLoaded={userDataLoaded} userData={userData}/>}/>\n        \n        <Route path=\"/newuser\" render={() => loggedIn? <Redirect to= \"/choicepage\" /> :<SaveForm logInNewUser={(userDeets) => logInNewUser(userDeets)} currentCharacter={currentCharacter} setCurrentCharacter={setCurrentCharacter} userData={userData} loggedInUsername={loggedInUsername} setLoggedInPassword={loggedInPassword} getUserData={getUserData} setLoaded={setLoaded}/>}/>\n       \n       <Route path=\"/createpage\" render={() => hasSelectedCharacter? <Redirect to=\"/loadpage\"/>: <CreatePage allAnimals={adoptableAnimals}\n                    setCurrentCharacter={setCurrentCharacter} setHasSelectedCharacter={setHasSelectedCharacter} getUserData={getUserData} userData={userData} setLoaded={setLoaded} userDataLoaded={userDataLoaded} getAllAnimalData={getAllAnimalData}/>}/> */}\n","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/reportWebVitals.js",[],"/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LandingPageContainer/LandingPage.js",["75","76","77","78","79"],"import React, {useState} from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\n\nconst LandingPage = ({onSubmit}) => {\n  const [formData, setFormData] = useState({\n    username: '',\n    password: ''\n  });\n\n  const handleChange = (event) => {\n    const newState = {...formData};\n    newState[event.target.name] = event.target.value;\n    setFormData(newState);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n<>\n  <div id=\"welcome_message\">\n    <h2>Welcome to our magical homepage</h2>\n  </div>\n  <br></br>\n  <div className=\"page_container\">\n\n    <br></br>\n    <div className=\"left_side\">\n      <img src=\"https://i.imgur.com/chKjcRm.gif\"/>\n    </div>\n    <div className=\"right_side\">\n    <form>\n      <div className=\"form_wrap\">\n        <p>Username</p>\n        <label htmlFor=\"username\"></label>\n        <input\n          onChange={handleChange}\n          name=\"username\"\n          id=\"username\"\n          type=\"text\"\n          value={formData.username} />\n      </div>\n\n      \n      <div className=\"form_wrap\">\n        <p>Password</p>\n        <label htmlFor=\"password\"></label>\n        <input\n          onChange={handleChange}\n          name=\"password\"\n          id=\"password\"\n          type=\"password\"\n          value={formData.password} />\n      </div>\n      <div className=\"form_wrap\">\n        <input onClick={handleSubmit} type=\"submit\" value=\"Submit\" />\n      </div>\n    </form>\n    \n \n \n    <Link className=\"form_wrap\" style={{ textDecoration: 'none' }} from=\"/\" to=\"/newuser\">\n      <button type=\"button\">\n          I'm new here!\n      </button>\n    </Link>\n    </div>\n\n\n\n  </div>\n  </>\n  \n  )};\n\nexport default LandingPage;","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LoadCreateContainer/ChoicePage.js",["80","81","82","83","84","85"],"import React, {useState, useEffect} from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\n\nconst ChoicePage = ({unsetSelectedCharacter, userDataLoaded, userData, getNewUserData}) => {\n\n  useEffect(() => {\n    unsetSelectedCharacter();\n  }, [])\n\n  // if(userData){\n  //   return <p>Loading....</p>\n  // }\n\n  if(userDataLoaded===false){\n    return <p>Loading....</p>\n  }\n  \n    \n  \n\n  return (\n  <div>\n    <h4>Create or Load</h4>\n    <p>Choose whether to create a new Tamagotchi or load a previously saved Tamagotchi</p>\n    <br></br>\n    <Link  from=\"/choicepage\" to=\"/createpage\">\n      <button type=\"button\">\n          Create\n      </button>\n    </Link>\n    <Link  from=\"/choicepage\" to=\"/loadpage\">\n      <button type=\"button\">\n          Load\n      </button>\n    </Link>\n  </div>\n  )};\n\nexport default ChoicePage;","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LoadCreateContainer/CreatePage.js",["86","87","88","89","90","91"],"import React, {useEffect, useState} from \"react\";\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\n\n\nconst CreatePage = ({allAnimals, userData, handleAdoptAnimal, currentCharacter, setCurrentCharacter, setHasSelectedCharacter, getUserData, setLoaded, userDataLoaded, getAllAnimalData}) => {\n\n  \n\n  const [formData, setFormData] = useState({\n    name: '',\n    animaltype: ''\n  });\n\n\n  const handleClick = (animal) => {\n    formData.animaltype = animal.animal\n    \n    \n    // if (!userData && loggedInUsername){\n    //   console.log(\"Saving new user\");\n    // }\n  }\n\n  const handleChange = (event) => {\n    const newState = {...formData};\n    newState[event.target.name] = event.target.value;\n    setFormData(newState);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    saveNewAnimal(formData)\n    getUserData()\n    getAllAnimalData()\n  }\n\n  \n\n  const animalArray = allAnimals.map((animal) => {\n    return(\n    <div key={animal.id}>\n      <div className=\"animal_container\">\n        <p className=\"animal_type\">{animal.animal} </p>\n        <img src={animal.image[0]} alt=\"animal pic\" width=\"200\"></img>\n        <button id=\"choose_animal_button\" onClick={() => handleClick(animal)} >Adopt</button>\n      </div>\n      \n      </div>\n    )\n})\n\n\n\nconst saveNewAnimal = (data) => {\n  // Simple POST request with a JSON body using fetch\n  const requestOptions = {\n      \n      method: 'POST',\n      headers: {'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        animalName: data.name,\n        animalType: data.animaltype,\n        health: 100,\n        happiness: 100,\n        cleanliness: 100,\n        fitness: 100,\n        hunger: 100,\n        user: {\n          id: userData[0].id,\n          userName: userData[0].userName,\n          password: userData[0].password,\n          imageURL: userData[0].imageURL}\n      })\n  };\n  return fetch('http://localhost:8080/api/animals', requestOptions)\n  .then(setHasSelectedCharacter(true))\n  .then(() => setLoaded(true))\n  .then(getUserData())\n  \n  \n}\n\nif(userDataLoaded === false){\n  return <p>Loading....</p>\n}\n\n  \n  \n\n  return(\n    <>\n    <p id=\"instruction\"> <b>Select a Tamagotchi you would like to adopt and give it a name below! </b></p>\n    <div className=\"animal_array_container\">\n        {animalArray}\n    </div>\n    <div className=\"link_container\">\n  \n      <form>\n        <label htmlFor=\"name\"></label>\n          <input \n            className=\"create_page_input\"\n            onChange={handleChange}\n            name=\"name\"\n            id=\"name\"\n            type=\"text\"\n            value={formData.name}\n            placeholder=\"Enter name\"/>\n          <input type=\"hidden\" id=\"animaltype\" name=\"animaltype\" value={formData.animaltype} onChange={handleChange}></input>\n          <input className=\"create_page_input\" type=\"submit\" value=\"Look after this pet\" onClick={handleSubmit}/>\n        </form>\n    </div>\n    </>\n      )\n};\n\nexport default CreatePage;","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LoadCreateContainer/LoadPage.js",["92","93","94","95","96","97","98"],"import React, {useEffect, useState} from \"react\";\nimport DisplayAllCharacters from '../../components/LoadCreateComponents/DisplayAllCharacters'\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\n\nconst LoadPage = ({userAnimals, selectCurrentCharacter, getUserData, getAllAnimalData, setLoaded, loaded, animalDataLoaded}) => {\n\n\n  useEffect(() => {\n    getUserData()\n    setLoaded(true)\n  }, [])\n\n  useEffect(() => {\n    getAllAnimalData()\n  }, [])\n\n  if(!userAnimals){\n    return (\n      <h1>You don't have any animals yet!</h1>\n    )\n  }\n\n  if (loaded === false){\n      return(\n        <img src=\"../src/gifs/loading.gif\" alt=\"\"/>\n      )\n    }\n\n    if(animalDataLoaded === false){\n      return <p>Loading....</p>\n    }\n\n\n  const characters = userAnimals.map((animal) => {\n    return (\n    <div key={animal.id}>\n      <DisplayAllCharacters animal={animal} />\n      <Link  from=\"/loadpage\" to=\"/character\" >\n          <button type=\"button\" onClick={() => selectCurrentCharacter(animal.id)}>\n              Look after your pet\n          </button>\n      </Link>\n      \n    </div>)\n  })\n\n  \n  \n\n  return(\n    <div>\n    <h1>Your Pets</h1>\n    {characters}\n  </div>\n  )\n};\n\nexport default LoadPage;","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/LandingPageContainer/NavBar.js",[],"/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/containers/CharacterContainer/Character.js",["99","100"],"import React, {useState} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport StatBar from \"../../components/CharacterComponents/StatBar\";\n\n\n\n\nconst Character = ({currentCharacter, increaseStat, currentImage, loaded, setLoggedInUsername, setLoggedInPassword, setUserData, setCurrentCharacter, setLoggedIn, setHasSelectedCharacter, setLoaded, setUserDataLoaded, setAnimalDataLoaded, setEasyDifficulty, getAllUserData}) => {\n\n    if(loaded === false){\n      return <p>Loading...</p>\n    }\n\n    const setEasy = () => {\n      // Get the checkbox\n  var checkBox = document.getElementById(\"myCheck\");\n\n  // If the checkbox is checked, display the output text\n  if (checkBox.checked == true){\n    setEasyDifficulty(true)\n  } else {\n    setEasyDifficulty(false)\n  }\n    }\n\n    const logout = (data) => {\n      const requestOptions = {\n          \n          method: 'PUT',\n          headers: {'Content-Type': 'application/json' },\n          body: JSON.stringify(\n            data\n          )\n      };\n      return fetch(`http://localhost:8080/api/animals/${data.id}`, requestOptions)\n      .then(setLoggedInUsername())\n      .then(setLoggedInPassword())\n      .then(setUserData([]))\n      .then(setCurrentCharacter({}))\n      .then(setLoggedIn(false))\n      .then(setHasSelectedCharacter(false))\n      .then(setLoaded(false))\n      .then(setUserDataLoaded(false))\n      .then(setAnimalDataLoaded(false))\n      .then(getAllUserData())\n    };\n\n    const saveProgress = (data) => {\n      const requestOptions = {\n          \n          method: 'PUT',\n          headers: {'Content-Type': 'application/json' },\n          body: JSON.stringify(\n            data\n          )\n      };\n      return fetch(`http://localhost:8080/api/animals/${data.id}`, requestOptions)\n      .then(setCurrentCharacter({}))\n      .then(setHasSelectedCharacter(false))\n    };\n\n    return(\n        <div className=\"character_sheet\">\n          <div className=\"left_side_character\">\n            <div className=\"card\">\n                <h4>\n                {currentCharacter.animalName}\n                </h4>\n                <p><h6>Species: {currentCharacter.animalType}</h6></p>\n                <img src={currentImage} alt=\"animal pic\" width=\"200\"></img>\n            </div>\n          <br></br>\n          <p>Easy Mode</p>\n          <label className=\"switch\">\n            <input type=\"checkbox\" id=\"myCheck\" onClick={setEasy}></input>\n            <span className=\"slider round\"></span>\n          </label>\n          </div>\n          <div className=\"right_side_character\">\n            <StatBar stat={currentCharacter.health} statName=\"Health\"\n              increaseStat={increaseStat}/>\n            <StatBar stat={currentCharacter.happiness} statName=\"Happiness\" \n            buttonLabel=\"Play with\" increaseStat={increaseStat} />\n            <StatBar stat={currentCharacter.cleanliness} statName=\"Cleanliness\"\n              increaseStat={increaseStat} buttonLabel=\"Put in the bath\"/>\n            <StatBar stat={currentCharacter.fitness} statName=\"Fitness\"\n              increaseStat={increaseStat} buttonLabel=\"Take for walk\"/>\n            <StatBar stat={currentCharacter.hunger} statName=\"Hunger\"\n              increaseStat={increaseStat} buttonLabel=\"Feed\"/>\n          <br/>\n          \n          <div className=\"save_button_div\">\n          <Link  from=\"/character\" to=\"/\" >\n          <button className=\"save_button\" type=\"button\" onClick={() => logout(currentCharacter)}>\n              Save and log out\n          </button>\n          </Link>\n          <Link  from=\"/character\" to=\"/choicepage\" >\n          <button className=\"save_button\" type=\"button\" onClick={() => saveProgress(currentCharacter)}>\n              Save progress!\n          </button>\n          </Link>\n          </div>\n          </div>\n        \n        </div>\n    )\n  };\n  \n  export default Character;","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/CharacterComponents/StatBar.js",["101"],"import React, {useState} from \"react\";\n\nconst StatBar = () => {\n  \n  \n\n  return(\n      <div>\n        <h1>\n        Stat Bar!\n        </h1>\n      </div>\n  )\n};\n\nexport default StatBar;","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/LoadCreateComponents/DisplayAllCharacters.js",["102"],"import React, {useState} from \"react\";\n\nconst DisplayAllCharacters = ({animal}) => {\n  \n  \n\n    return(\n        <div>\n            <h1>{animal.name}</h1>\n        </div>\n    )\n  };\n  \n  export default DisplayAllCharacters;","/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/CharacterComponents/Button.js",["103"],"import React, {useState} from \"react\";\n\nconst Button = ({statName, increaseStat, buttonLabel}) => {\n\n\n  let lowerCaseStatName = statName.toString().toLowerCase()\n\n\n  return(\n      <div>\n        <button className=\"stat_buttons\" type=\"button\" onClick={() => increaseStat(lowerCaseStatName)}>{buttonLabel}</button>\n      </div>\n  )\n};\n\nexport default Button;",["104","105"],"/Users/michaelanderson/Desktop/codeclan_work/Project3/tamagotchi_towers/src/components/LoadCreateComponents/SaveForm.js",["106","107","108","109","110"],"import React, {useState} from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect, Link } from \"react-router-dom\";\n\nconst SaveForm = ({logInNewUser, currentCharacter, setCurrentCharacter, userData, loggedInUsername, loggedInPassword, setLoggedInPassword, setLoggedIn, getUserData}) => {\n\n    const [newUsername, setNewUsername] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n\n    const handleUsernameChange = (evt) => {\n        setNewUsername(evt.target.value);\n    };\n\n    const handlePasswordChange = (evt) => {\n        setNewPassword(evt.target.value);\n    };\n\n    const handleFormSubmit = (evt) => {\n        evt.preventDefault();\n        const usernameToSubmit = newUsername.trim();\n        const passwordToSubmit = newPassword.trim();\n        saveNewUser(usernameToSubmit, passwordToSubmit); \n        \n        \n        // setNewUsername(\"\");\n        // setNewPassword(\"\");\n    }\n\n    const saveNewUser = (usernameToSubmit, passwordToSubmit) => {\n        // Simple POST request with a JSON body using fetch\n        const requestOptions = {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n              userName: newUsername,\n              password: newPassword,\n              imageURL: \"fakeImgUrl\",\n              animals: []\n            })\n        };\n        return fetch('http://localhost:8080/api/users', requestOptions)\n            .then(() => logInNewUser({\n                username: usernameToSubmit,\n                password: passwordToSubmit\n            }))\n            .then(setNewUsername(\"\"))\n            .then(setNewPassword(\"\"))\n      }\n\n\n    return(\n        <>\n        <p>If you would like to create a pet please provide a username and password in the form below</p>\n       \n        <form className=\"comment-form\" onSubmit={handleFormSubmit}>\n            <input className=\"new_user_button\" type=\"text\"\n            placeholder=\"Your username\"\n            value={newUsername}\n            onChange={handleUsernameChange}/>\n            \n\n            <input className=\"new_user_button\" type=\"password\"\n            placeholder=\"Your password\"\n            value={newPassword}\n            onChange={handlePasswordChange}/>\n\n            <input className=\"new_user_button\" type=\"submit\"\n            value=\"Create Account and Log in\"/>\n        </form>\n        {/* <Link  from=\"/newuser\" to=\"/createpage\">\n            <button type=\"button\">\n                Create a new pet\n            </button>\n        </Link> */}\n        </>\n    )\n};\n\nexport default SaveForm;",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":188,"column":6,"nodeType":"117","endLine":188,"endColumn":75,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":188,"column":7,"nodeType":"120","endLine":188,"endColumn":74},{"ruleId":"121","severity":1,"message":"122","line":188,"column":24,"nodeType":"120","messageId":"123","endLine":188,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":188,"column":44,"nodeType":"120","messageId":"123","endLine":188,"endColumn":46},{"ruleId":"115","severity":1,"message":"124","line":205,"column":6,"nodeType":"117","endLine":205,"endColumn":123,"suggestions":"125"},{"ruleId":"115","severity":1,"message":"119","line":205,"column":8,"nodeType":"120","endLine":205,"endColumn":121},{"ruleId":"126","severity":1,"message":"127","line":245,"column":1,"nodeType":"128","messageId":"129","endLine":251,"endColumn":257},{"ruleId":"130","severity":1,"message":"131","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":33},{"ruleId":"130","severity":1,"message":"134","line":2,"column":35,"nodeType":"132","messageId":"133","endLine":2,"endColumn":40},{"ruleId":"130","severity":1,"message":"135","line":2,"column":42,"nodeType":"132","messageId":"133","endLine":2,"endColumn":48},{"ruleId":"130","severity":1,"message":"136","line":2,"column":50,"nodeType":"132","messageId":"133","endLine":2,"endColumn":58},{"ruleId":"137","severity":1,"message":"138","line":31,"column":7,"nodeType":"139","endLine":31,"endColumn":51},{"ruleId":"130","severity":1,"message":"140","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"130","severity":1,"message":"131","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":33},{"ruleId":"130","severity":1,"message":"134","line":2,"column":35,"nodeType":"132","messageId":"133","endLine":2,"endColumn":40},{"ruleId":"130","severity":1,"message":"135","line":2,"column":42,"nodeType":"132","messageId":"133","endLine":2,"endColumn":48},{"ruleId":"130","severity":1,"message":"136","line":2,"column":50,"nodeType":"132","messageId":"133","endLine":2,"endColumn":58},{"ruleId":"115","severity":1,"message":"141","line":8,"column":6,"nodeType":"117","endLine":8,"endColumn":8,"suggestions":"142"},{"ruleId":"130","severity":1,"message":"143","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"130","severity":1,"message":"131","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":33},{"ruleId":"130","severity":1,"message":"134","line":2,"column":35,"nodeType":"132","messageId":"133","endLine":2,"endColumn":40},{"ruleId":"130","severity":1,"message":"135","line":2,"column":42,"nodeType":"132","messageId":"133","endLine":2,"endColumn":48},{"ruleId":"130","severity":1,"message":"136","line":2,"column":50,"nodeType":"132","messageId":"133","endLine":2,"endColumn":58},{"ruleId":"130","severity":1,"message":"144","line":2,"column":60,"nodeType":"132","messageId":"133","endLine":2,"endColumn":64},{"ruleId":"130","severity":1,"message":"140","line":1,"column":27,"nodeType":"132","messageId":"133","endLine":1,"endColumn":35},{"ruleId":"130","severity":1,"message":"131","line":3,"column":27,"nodeType":"132","messageId":"133","endLine":3,"endColumn":33},{"ruleId":"130","severity":1,"message":"134","line":3,"column":35,"nodeType":"132","messageId":"133","endLine":3,"endColumn":40},{"ruleId":"130","severity":1,"message":"135","line":3,"column":42,"nodeType":"132","messageId":"133","endLine":3,"endColumn":48},{"ruleId":"130","severity":1,"message":"136","line":3,"column":50,"nodeType":"132","messageId":"133","endLine":3,"endColumn":58},{"ruleId":"115","severity":1,"message":"145","line":11,"column":6,"nodeType":"117","endLine":11,"endColumn":8,"suggestions":"146"},{"ruleId":"115","severity":1,"message":"147","line":15,"column":6,"nodeType":"117","endLine":15,"endColumn":8,"suggestions":"148"},{"ruleId":"130","severity":1,"message":"140","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"149","severity":1,"message":"150","line":19,"column":24,"nodeType":"151","messageId":"152","endLine":19,"endColumn":26},{"ruleId":"130","severity":1,"message":"140","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"130","severity":1,"message":"140","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"130","severity":1,"message":"140","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":24},{"ruleId":"111","replacedBy":"153"},{"ruleId":"113","replacedBy":"154"},{"ruleId":"130","severity":1,"message":"131","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":33},{"ruleId":"130","severity":1,"message":"134","line":2,"column":35,"nodeType":"132","messageId":"133","endLine":2,"endColumn":40},{"ruleId":"130","severity":1,"message":"135","line":2,"column":42,"nodeType":"132","messageId":"133","endLine":2,"endColumn":48},{"ruleId":"130","severity":1,"message":"136","line":2,"column":50,"nodeType":"132","messageId":"133","endLine":2,"endColumn":58},{"ruleId":"130","severity":1,"message":"144","line":2,"column":60,"nodeType":"132","messageId":"133","endLine":2,"endColumn":64},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.","ArrayExpression",["157"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","LogicalExpression","no-mixed-operators","Unexpected mix of '&&' and '||'.","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'characterGif', 'loggedIn', and 'reduceStats'. Either include them or remove the dependency array.",["158"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'unsetSelectedCharacter'. Either include it or remove the dependency array. If 'unsetSelectedCharacter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["159"],"'useEffect' is defined but never used.","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getUserData' and 'setLoaded'. Either include them or remove the dependency array. If 'getUserData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["160"],"React Hook useEffect has a missing dependency: 'getAllAnimalData'. Either include it or remove the dependency array. If 'getAllAnimalData' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["161"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["155"],["156"],"no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [getUserData]",{"range":"172","text":"173"},"Update the dependencies array to be: [characterGif, loggedIn, reduceStats]",{"range":"174","text":"175"},"Update the dependencies array to be: [unsetSelectedCharacter]",{"range":"176","text":"177"},"Update the dependencies array to be: [getUserData, setLoaded]",{"range":"178","text":"179"},"Update the dependencies array to be: [getAllAnimalData]",{"range":"180","text":"181"},[5812,5881],"[getUserData]",[6259,6376],"[characterGif, loggedIn, reduceStats]",[291,293],"[unsetSelectedCharacter]",[431,433],"[getUserData, setLoaded]",[484,486],"[getAllAnimalData]"]